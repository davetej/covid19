from airflow import settings
from airflow.www.security import AirflowSecurityManager
from flask_appbuilder import Model
from flask_appbuilder.security.sqla.models import Role, PermissionView, Permission, ViewMenu
from sqlalchemy.orm import Session

def get_or_create(session, model, **kwargs):
    instance = session.query(model).filter_by(**kwargs).first()
    if instance:
        return instance
    else:
        instance = model(**kwargs)
        session.add(instance)
        session.commit()
        return instance

def update_role_permissions(role_name, new_permissions):
    session: Session = settings.Session()
    
    # Get the role
    role = session.query(Role).filter(Role.name == role_name).first()
    if not role:
        raise ValueError(f"Role {role_name} does not exist")
    
    # Clear existing permissions
    role.permissions = []

    # Add new permissions
    for perm_name, view_name in new_permissions:
        perm = get_or_create(session, Permission, name=perm_name)
        view = get_or_create(session, ViewMenu, name=view_name)
        perm_view = get_or_create(session, PermissionView, permission=perm, view_menu=view)
        role.permissions.append(perm_view)

    # Commit changes
    session.add(role)
    session.commit()
    print(f"Successfully updated permissions for role '{role_name}'")

# Example usage:
if __name__ == "__main__":
    # Define new permissions as a list of tuples (permission, view_menu)
    new_permissions = [
        ('can_read', 'DAGs'),
        ('can_edit', 'DAGs'),
        ('can_read', 'Task Instances')
        # Add more permissions as needed
    ]

    update_role_permissions('YourRoleName', new_permissions)
