import logging
from airflow.plugins_manager import AirflowPlugin
from airflow.www.security import AirflowSecurityManager
from flask import session
from airflow.models import DagBag

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class CustomSecurityManager(AirflowSecurityManager):
    def get_user(self):
        # Get the logged-in user
        user = super().get_user()
        if user:
            logger.info("User logged in: %s", user.username)
            session['user'] = user.username

            # Assuming roles are assigned through Flask-AppBuilder
            user_roles = [role.name for role in user.roles]
            session['roles'] = user_roles
            logger.info("User roles: %s", user_roles)
        return user

    def get_user_dags(self):
        # Get the logged-in user's username from session
        username = session.get('user')

        # Define the tag to filter by (e.g., the username)
        filter_tag = username

        # Load all DAGs
        dag_bag = DagBag()

        # Filter DAGs based on the owner or a specific tag
        filtered_dags = {
            dag_id: dag for dag_id, dag in dag_bag.dags.items()
            if dag.owner == username or filter_tag in dag.tags
        }
        return filtered_dags

    def get_accessible_dags(self, user):
        return self.get_user_dags()

class CustomDAGFilterPlugin(AirflowPlugin):
    name = "custom_dag_filter_plugin"
    security_manager_class = CustomSecurityManager

    def __init__(self):
        super().__init__()
        logger.info("CustomDAGFilterPlugin initialized")
